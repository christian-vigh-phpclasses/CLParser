<?php
/***************************************************************************************************

    NAME
	AsciiReport.phpclass

    DESCRIPTION
	Simple reporting class in Ascii mode.

    AUTHOR
	Christian Vigh, 12/2008.

    HISTORY
    [Version : 1.0]		[Date : 2008/12/29]		[Author : CV]
	Initial release.

    [Version : 2.0]		[Date : 2012/10/05]		[Author : CV]
    	Adapted to the Thrak library version 2.

    [Version : 2.0.1]		[Date : 2014/01/07]		[Author : CV]
    	Changed the AsciiReport constructor so that it can accept a single array parameter containing
	column definitions instead of several column definitions.

    [Version : 2.0.2]		[Date : 2014/11/12]		[Author : CV]
	. Added the possibility to put non-array string rows in the input data array, to indicate a 
 	  separation line should be added. The first character of the supplied string is the one to
 	  be used for column border filling.
	  A string starting with '=', for example, will generate a separation line like :
  
 		|==========|========|
  
 	  If the string starts with '!', such as in '!=', then the previous separation line will be
 	  replaced by this one.

    [Version : 2.0.3]		[Date : 2014/12/01]		[Author : CV]
	. Finally took time to handle multiline values in reports.

    [Version : 2.0.4]		[Date : 2014/12/07]		[Author : CV]
	. Added the $bias parameter to the Summary() method, to subtract from the total record count
	  extra records generated by separation rows or subtotal rows.
	. Modified the Generate() method to not include separator rows into element count.

    [Version : 2.0.5]		[Date : 2014/12/08]		[Author : CV]
	. Added the 'overflow' column attribute which defines what to do if the maximum column width
	  is exceeded ; it can have the following values :
	  - 'none' (default) :
 		No special overflow handling is performed.
 	  - 'report' :
 		The string "(...)" is appendend to the cell value.
 	  - 'wrap' :
 		The string is wrapped on several lines, each of them having a maximum of 'width'
 		characters.

    [Version : 2.0.6]		[Date : 2015/04/10]		[Author : CV]
	. Changed the Summary() method to be able to handle (a small subset of ) special plural 
	  forms, including composed words (for example, 'cache statistic' will give
	  'cache statistics').

    [Version : 2.0.7]		[Date : 2015/08/08]		[Author : CV]
	. Data items can include a boolean '!' entry ; when true, the item will not be included in
	  the final count.

    [Version : 2.0.8]		[Date : 2015/11/17]		[Author : CV]
	. Modified the UpdateWidths() method which did not correctly handle objects implementing
	  the ArrayAccess interface.

    [Version : 2.0.9]		[Date : 2015/11/21]		[Author : CV]
	. The Generate() method does not display column headers anymore if there is no data to 
	  display.
	. Added the $display parameter to the Generate() method.

    [Version : 2.0.10]		[Date : 2016/01/13]		[Author : CV]
	. Corrected the Summary() method : the first words of the singular form were not put in the
	  plural form.

    [Version : 2.0.11]		[Date : 2016/01/26]		[Author : CV]
	. Changed the meaning of the "format" attribute : it is now a callback function.
  
 ***************************************************************************************************/
namespace 	CL\Utilities ;

require_utility ( 'String.phpclass' ) ;

use	CL\Utilities\String ;

// Text alignment options
define ( 'ASCII_REPORT_ALIGN_LEFT'	, 1 ) ;
define ( 'ASCII_REPORT_ALIGN_RIGHT'	, 2 ) ;
define ( 'ASCII_REPORT_ALIGN_CENTER'	, 3 ) ;
define ( 'ASCII_REPORT_ALIGN_DEFAULT'	, 0 ) ;

// Overflow options
define ( 'ASCII_REPORT_OVERFLOW_NONE'	, 0 ) ;
define ( 'ASCII_REPORT_OVERFLOW_REPORT'	, 1 ) ;
define ( 'ASCII_REPORT_OVERFLOW_WRAP'	, 2 ) ;


/*===========================================================================================

    AsciiReportColumn -
    	Holds the definition of a report column.

  ===========================================================================================*/

class  AsciiReportColumn
   {
	// Members
	public $MemberName ;            // Name or index of the column member
	public $Title ;                 // Column title
	public $Align ;                 // Alignment option
	public $Width ;                 // Column width
	public $ComputedWidth ;         // Computed column width
	public $FormatCode ;            // PHP code to format the field
	public $Overflow ;		// Overflow mode, when a width is specified
	 

	//
	// Constructor
	//
	public function __construct ( $member, $title, $align, $width, $formatcode, $overflow )
           {
		// The member is required
		if  ( ! isset ( $member ) )
                   {
			error ( new \InvalidArgumentException ( "AsciiReportColumn: the 'member' field is required." ) ) ;
			return ;
                    }

		$this -> MemberName = $member ;

		// If the title is not specified, it will default to the member name
		if  ( ! $title )
		        $this -> Title = $member ;
		else
		        $this -> Title = $title ;

		// The default alignment option will depend on the field's contents
		$align = strtolower ( $align ) ;

		switch ( $align )
                   {
			case    "left" :
			        $this -> Align = ASCII_REPORT_ALIGN_LEFT ;
			        break ;

			case    "right" :
			        $this -> Align = ASCII_REPORT_ALIGN_RIGHT ;
			        break ;

			case    "center" : case  "middle" :
			        $this -> Align = ASCII_REPORT_ALIGN_CENTER ;
			        break ;

			default :
			        $this -> Align = ASCII_REPORT_ALIGN_DEFAULT ;
                   }
		
		// Overflow mode
		$overflow	=  strtolower ( $overflow ) ;
		
		switch  ( $overflow )
		   {
			case	"report" :
				$this -> Overflow	=  ASCII_REPORT_OVERFLOW_REPORT ;
				break ;
				
			case	"wrap" :
				$this -> Overflow	=  ASCII_REPORT_OVERFLOW_WRAP ;
				break ;
				
			default :
				$this -> Overflow	=  ASCII_REPORT_OVERFLOW_NONE ;
		    }
		
		// Other fields
		$this -> Width		=  $width ;
		$this -> FormatCode	=  $formatcode ;
            }


	//
	// ValueExpand -
	//      Expands the specified value, if format code has been specified.
	//
	private function  ValueExpand ( $value )
           {
		if  ( $this -> FormatCode )
                   {
			/*
			$value = preg_replace ( '/\!/',
					'"' . addslashes ( $value ) . '"',
					$this -> FormatCode ) ;

			eval ( '$value = ' . "$value ;" ) ;
			*/
			$value	=  call_user_func_array ( $this -> FormatCode, [ $value ] ) ;
                    }
		
		return ( $value ) ;
           }


	//
	// ValueLength -
	//      Returns the specified value length, taking into account whether a format code
	//      has been specified or not.
	public function  ValueLength ( $value )
           {
		$value	=  $this -> ValueExpand ( $value ) ;
		
		$lines	=  explode ( "\n", $value ) ;
		$maxlen	=  -1 ;
		
		foreach  ( $lines  as  $line )
		   {
			$len	=  strlen ( $line ) ;
			
			if (  $len  >  $maxlen )
				$maxlen		=  $len ;
		    }
		
		return ( $maxlen ) ;
	    }


	//
	// Value -
	//      Returns the formatted value for this field.
	//
	function  Value ( $data )
           {
		$lines	=  explode ( "\n", $data ) ;
		$result =  [] ;
		
		
		foreach  ( $lines  as  $line )
		   {
			if  ( IS_STANDALONE )
				$space = ' ' ;
			else
				$space = '&nbsp;' ;

			// Expand the value
			$line = $this -> ValueExpand ( $line ) ;

			// Check if we have to adjust to a certain width
			$width = ( $this -> Width ) ? $this -> Width : $this -> ComputedWidth ;

			switch  ( $this -> Overflow ) 
			   {
				case  ASCII_REPORT_OVERFLOW_NONE :
					$output_lines	=  [ substr ( $line, 0, $width ) ] ;
					break ;
						
				case  ASCII_REPORT_OVERFLOW_REPORT :
					if  ( $width  >  5  &&  strlen ( $line ) >  $width )
						$output_lines	=  [ substr ( $line, 0, $width - 5 ) . "(...)" ] ;
					else
						$output_lines  =  [ $line ] ;
					break ;
					
				case  ASCII_REPORT_OVERFLOW_WRAP :
					$output_lines	=  explode ( "\n", wordwrap ( $line, $width, "\n", true ) ) ;
					break ;
					
				default :
					$output_lines	=  [ $line ] ;
			    }

			// Then align the result
			$align = $this -> Align ;


			foreach  ( $output_lines  as  $output_line )
			   {
				if  ( $align  ==  ASCII_REPORT_ALIGN_DEFAULT )
				   {
					if  ( is_bool ( $output_line ) )
						$align = ASCII_REPORT_ALIGN_CENTER ;
					elseif ( is_numeric ( $output_line ) )
						$align = ASCII_REPORT_ALIGN_RIGHT ;
					else
						$align = ASCII_REPORT_ALIGN_LEFT ;
				    }
				
				switch ( $align )
				   {
					case ASCII_REPORT_ALIGN_RIGHT :
						if  ( $width )
							$output_line = str_pad ( $output_line, $width, ' ', STR_PAD_LEFT ) ;
						break ;

					case ASCII_REPORT_ALIGN_CENTER :
						if  ( $width )
							$output_line = str_pad ( $output_line, $width, ' ', STR_PAD_BOTH ) ;
						break ;
						
					case ASCII_REPORT_ALIGN_LEFT :
					default :
						if  ( $width )
							$output_line = str_pad ( $output_line, $width, ' ', STR_PAD_RIGHT ) ;
						break ;
				    }

				$result []	=  $output_line ;
			    }
		    }

		return ( $result ) ;
            }

	//
	// Title -
	//      Returns the padded title string
	//
	public function Title ( )
           {
		$width = ( $this -> ComputedWidth ) ? $this -> ComputedWidth : $this -> Width ;
		$data = str_pad ( $this -> Title, $width, chr ( 1 ), STR_PAD_RIGHT ) ;

		return ( $data ) ;
            }
    }



/*===========================================================================================

    AsciiReport -
        Very simple ASCII report generator.

        An ascii report is built in three steps :
        - First, instantiate the report object :
                $report =new AsciiReport ( definitions ) ;
	  The definition parameter is described in the documentation of the object
	  constructor.
	- Second, build an array of rows to be listed. These rows can either be objects
                  (for example, the result of a DBTable query), simple arrays or
                  associative arrays.
                        $rows = some_method_of_acquiring_rows ( ) ;
	- Third, call the Generate() method, providing the list of rows acquired during
	  step 2 :
	        $report -> Generate ( $rows ) ;

  ===========================================================================================*/

class  AsciiReport
  {
	// Data members
	private  $ColDefs ;


	/*-------------------------------------------------------------------------------------------

	    NAME
		Constructor.

	    PROTOTYPE
		$report = new AsciiReport ( $definitions ) ;

	    DESCRIPTION
	        Builds the report object.
	        The constructor accepts any number of associative array arguments, which define the
	        column shape that will be present in the report, or a single-array argument which in
		turns contains the column definition arrays.
		
	        Each associative array can have the following keys :

                'member' -
                        Specifies the name of the member that will be used by the Generate() method
                        to retrieve a column value.
                        This element can either be :
                        - A method name, if the object list passed to the Generate() method is a list
			  of objects
			- An integer index, if the object list contains simple arrays
			- A key name, if the object list contains associative arrays

                'title' -
                        Column title. If this element is not specified, then the member name will be
                        used.

                'align' -
                        Alignment option (left, right or center). If this parameter is not specified,
                        the value will be aligned depending on its type : right for numeric values,
			center for boolean values, left for other kinds of values.

                'width' -
                        This element can be specified to restrict the width of row columns. If not
                        specified, the row columns widths are adjusted automatically.

                'code' -
                        PHP code to execute for formatting the value. Suppose for example that we
                        have a field that holds a date/time value as an Unix time. The following will
                        allow for formatting this time value as a date :

                                'code' => 'date ( "Y/m/d H:i:s", ! )' ;

			The bang character ('!') will be replaced by the real column value.
			Note that there is no need to add a semicolon at the end of the last instruction
			in the code.

	 --------------------------------------------------------------------------------------------*/
	function  __construct ( )
           {
		$argc = func_num_args ( ) ;

		if  ( ! $argc )
                   {
			error ( new \InvalidArgumentException ( "AsciiReport: It is mandatory to provide column definitions to the object constructor." ) ) ;
			return ;
                    }

		$defs = array ( ) ;
		
		if  ( $argc  ==  1  &&  is_array ( func_get_arg ( 0 ) ) )
			$argv	=  func_get_arg ( 0 ) ;
		else
			$argv	=  func_get_args ( ) ;
			

		foreach ( $argv  as  $def )
                   {
			$coldef = new AsciiReportColumn (
					 isset ( $def [ 'member'	] ) ? $def [ 'member'	] : '',
					 isset ( $def [ 'title'		] ) ? $def [ 'title'	] : '',
					 isset ( $def [ 'align'		] ) ? $def [ 'align'	] : '',
					 isset ( $def [ 'width'		] ) ? $def [ 'width'	] : '',
					 isset ( $def [ 'format'	] ) ? $def [ 'format'	] : '',
					 isset ( $def [ 'overflow'	] ) ? $def [ 'overflow' ] : ''
								) ;
			$defs [] = $coldef ;
                    }

		$this -> ColDefs = $defs ;
            }


	/*-------------------------------------------------------------------------------------------

	    NAME
		Summary - Generates a summary.

	    PROTOTYPE
		$output = $report -> Summary ( $singular, $plural = '', $additional_text = '', 
						$bias = 0 ) ;

	    DESCRIPTION
	        Outputs a summary string about the number of elements listed for the report.

	 --------------------------------------------------------------------------------------------*/
	private			$ElementCount ;
	
	// Special plural forms 
	static private		$PluralForms		=
	   [
		'accommodation'	 	=>  'accommodation',
		'advice'	 	=>  'advice',
		'baggage'	 	=>  'baggage',
		'bread'	 		=>  'bread',
		'bravery'	 	=>  'bravery',
		'chaos'	 		=>  'chaos',
		'clarity'	 	=>  'clarity',
		'courage'	 	=>  'courage',
		'cowardice'	 	=>  'cowardice',
		'equipment'	 	=>  'equipment',
		'education'	 	=>  'education',
		'evidence'	 	=>  'evidence',
		'foot'			=>  'feet',
		'furniture'	 	=>  'furniture',
		'garbage'	 	=>  'garbage',
		'greed'	 		=>  'greed',
		'homework'	 	=>  'homework',
		'honesty'	 	=>  'honesty',
		'information'	 	=>  'information',
		'jewelry'	 	=>  'jewelry',
		'knowledge'	 	=>  'knowledge',
		'livestock'	 	=>  'livestock',
		'luggage'	 	=>  'luggage',
		'marketing'	 	=>  'marketing',
		'money'	 		=>  'money',
		'insurance'	 	=>  'insurance',
		'mud'	 		=>  'mud',
		'news'	 		=>  'news',
		'pasta'	 		=>  'pasta',
		'progress'	 	=>  'progress',
		'racism'	 	=>  'racism',
		'research'	 	=>  'research',
		'statistics'		=>  'statistics',
		'tooth'			=>  'teeth',
		'travel'	 	=>  'travel',
		'weather'	 	=>  'weather',
		'work'	 		=>  'work',	    
	    ] ;

	public function  Summary ( $singular = '', $plural = '', $additional_text = '', $bias = 0 )
           {
		$count = $this -> ElementCount - $bias ;

		if  ( IS_STANDALONE )
			$newline = "\r\n" ;
		else
			$newline = "<br/>" ;

		// By default, summary line references 'elements'
		if  ( ! $singular )
		        $singular = 'element' ;

		// Compute a plural form only when more than one element is present
		if  ( $count  >  1  &&  ! $plural )
		   {
			// Plural form is reserved only to the very last word of the singular form
			$words		=  explode ( ' ', $singular ) ;
			$singular	=  array_pop ( $words ) ;
			$low_singular	=  strtolower ( $singular ) ;
			
			// A plural form exists ; validate it
			if  ( isset ( self::$PluralForms [ $low_singular ] ) )
				$plural		=  self::$PluralForms [ $low_singular ] ;
			// English words ending ith '-ism' are invariable
			else if  ( String::EndsWith ( $low_singular, 'ism' ) )
				$plural		=  $singular ;
			// Words ending with -y give -ies
			else if  ( String::EndsWith ( $low_singular, 'y' ) )
				$plural		=  substr ( $low_singular, 0, strlen ( $low_singular ) - 1 ) . 'ies' ;
			// Words ending with -x give -xes
			else if  ( String::EndsWith ( $low_singular, 'x' ) )
				$plural		=  substr ( $low_singular, 0, strlen ( $low_singular ) - 1 ) . 'xes' ;
			// Words ending with -ss give -sses
			else if  ( String::EndsWith ( $low_singular, 'ss' ) )
				$plural		=  substr ( $low_singular, 0, strlen ( $low_singular ) - 2 ) . 'sses' ;
			// Otherwise, add trailing 's' for unmatched words
			else if  ( ! String::EndsWith ( $low_singular, 's' ) )
				$plural		=  $singular . 's' ;

			// If the singular form contains several words, don't forget to put them in the plural form
			if  ( count ( $words ) )
			   {
				$plural		=  implode ( ' ', $words ) . ' ' . $plural ; 
			    }
		    }

		// Now, try to display a proper message taking element count into account
		if  ( ! $count )
			return ( "No $singular found$additional_text.$newline" ) ;
		else
                   {
			$name    = ( $count  > 1 ) ? $plural : $singular ;
			
			return ( "$count $name listed$additional_text.$newline" ) ;
                    }
            }


	/*-------------------------------------------------------------------------------------------

	    NAME
		Generate - Generates report.

	    PROTOTYPE
		$output = $report -> Generate ( $list, $display = false ) ;

	    DESCRIPTION
	        Generates a report according to the column definitions specified during report object
		construction.

	    PARAMETERS
		$list (array of associative arrays or objects) -
			An array whose items are either an associative array with key/value pairs
			or an object.
			The associative array keys or the object properties must match the member
			names supplied to the AsciiReport constructor.

		$display (boolean) -
			When true, the results are also displayed in real time.

	    RETURN VALUE
		Returns a string containing the ascii report data, or an empty string if no data
		were supplied.

	 --------------------------------------------------------------------------------------------*/
	public function  Generate ( $list, $display = false )
           {
		if  ( ! count ( $list ) )
			return ( '' ) ;

		$this -> ElementCount = 0 ;

		// Compute the width of each column
		$this -> UpdateWidths ( $list ) ;

		// Resulting string
		$result = "" ;

		if  ( ! IS_STANDALONE )
		   {
			$result  = '<font face="Courier New, Courier, monospace">' ;
			$newline = "<br/>" ;
		   }
		else
			$newline = "\r\n" ;

		// Build the header
		$big_separation =  $this -> SeparationLine ( '=' ) . $newline ;
		$separation	=  $this -> SeparationLine (  ) . $newline ;
		$result        .=  $big_separation . $this -> TitleLine ( ) . $newline . $big_separation ;

		if  ( $display )
			echo ( $result ) ;

		// Loop through the provided items to be listed
		if  ( $list )
		   {
			// Loop through data lines 
			// TODO: Current implementation is a complete aberration from a performance point of view
			foreach ( $list  as  $item )
	                   {
				// Find the maximum number of lines for this data line
				$max_height	=  -1 ;
			
				if  ( is_array ( $item ) )
				   {
					foreach  ( $item  as  $cell_line )
					   {
						foreach ( $this -> ColDefs  as  $def )
						   {
							$member_value	=  $this -> GetMemberValue ( $def, $item ) ;
							$values		=  $def -> Value ( $member_value ) ;
							$count		=  count ( $values ) ;
			
							if  ( $count  >  $max_height )
								$max_height	=  $count ;
						    }
					    }
				    }
				else 
					$max_height	=  1 ;
			
				// If data is an array, then output the values for a single row
				if  ( is_array ( $item )  ||  $item  instanceof  \ArrayAccess )
				   {
					$line	=  '' ;

					for  ( $i = 0 ; $i  <  $max_height ; $i ++ )
					   {
						$line .= "|" ;

						foreach ( $this -> ColDefs  as  $def )
						   {
							$member_value	=  $this -> GetMemberValue ( $def, $item ) ;
							$values		=  $def -> Value ( $member_value ) ;

							$value		=  ( $i  <  count ( $values ) ) ?  
											$values [$i] : 
											str_repeat ( ' ', ( $def -> ComputedWidth ) ?  
														$def -> ComputedWidth : $def -> Width ) ;

							$line .= " $value |" ;
						    }
					
						$line	.=  $newline ;
					    }
					
					// Add the report bottom
					$line   .= $separation ;
					$result	.=  $line ;

					if  ( $display )
						echo ( $line ) ;

					// Count one more element if array key '!' is undefined or set to false
					if  ( ! isset ( $item [ '!' ] )  ||  ! $item [ '!' ] )
						$this -> ElementCount ++ ;
				    }
				// Otherwise, this is big separation line
				else
				   {
					$replace_previous_separator	=  false ;
					
					// Leading bang means we must replace the previous separation line, generated for the end of a row
					if  ( ! strlen ( $item ) )			// Default to '-' for empty strings
						$char		=  '-' ;
					
					if  ( $item [0]  ==  '!' )
					   {
						$replace_previous_separator	=  true ;
						$char				=  ( strlen ( $item )  >  1 ) ?  $item [1] : '-' ;
					    }
					else
						$char		=  $item [0] ;
					
					$line	=  $this -> SeparationLine ( $char ) . $newline ;
					
					if  ( $replace_previous_separator )
						$result		=  substr ( $result, 0, strlen ( $result ) - strlen ( $line ) ) ;
						
					$result .= $line ;
				    }
	                   }
		    }

		if  ( ! IS_STANDALONE )
			output ( "</font>" ) ;

		// All done, return
		return ( $result ) ;
            }


	//
	// GetMemberValue -
	//      Returns the value of a field in the specified record.
	//      The specified record can be an object, an array or an associative array.
	//
	private function  GetMemberValue ( $coldef, $row )
           {
		$member = $coldef -> MemberName ;

		if  ( is_object ( $row ) )
		        return ( $row -> $member ) ;
		else if  ( array_key_exists ( $member, $row ) )
		        return ( $row [$member] ) ;
		else
			return ( '' ) ;
            }


	 //
	 // ResetWidths -
	 //     Resets the computed column widths.
	 //
	 private function  ResetWidths ( )
            {
		foreach  ( $this -> ColDefs  as  $item )
		        $item -> ComputedWidth = max ( $item -> Width, strlen ( $item -> Title ) ) ;
             }


	//
	// UpdateWidths -
	//      Updates the column widths according to the given record list.
	//
	private function  UpdateWidths ( $list )
           {
		$this -> ResetWidths ( ) ;

		foreach ( $this -> ColDefs  as  $def )
                   {
			if  ( $list )
			   {
				foreach ( $list  as  $row )
	                           {
					// Only process real data row, not separators
					if  ( is_array ( $row )  ||  $row  instanceof \ArrayAccess )
					   {
						$value = $this -> GetMemberValue ( $def, $row ) ;
						$width = $def -> ValueLength ( $value ) ;

						if ( ! $def -> Width  &&  $width  >  $def -> ComputedWidth )
							$def -> ComputedWidth = $width ;
					    }
	                            }
			    }
                    }
            }

	//
	// SeparationLine -
	//      Returns a separation line.
	//
	private function  SeparationLine ( $dash = '-' )
           {
		$result = '+' ;

		foreach ( $this -> ColDefs  as  $def )
		        $result .= str_repeat ( $dash, $def -> ComputedWidth + 2 ) . '+' ;

		return ( $result ) ;
            }

	//
	// TitleLine -
	//      Returns the header line.
	//
	private function TitleLine ( )
           {
		if  ( IS_STANDALONE )
			$space = ' ' ;
		else
			$space = '&nbsp;' ;

		$result = "|" ;

		foreach ( $this -> ColDefs  as  $def )
		   {
			$data = str_replace ( chr ( 1 ), $space, $def -> Title ( ) ) ;
		        $result .= ' ' . $data . ' |' ;
		    }

		return ( $result ) ;
           }
   }